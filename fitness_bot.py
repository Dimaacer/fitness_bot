import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import matplotlib.pyplot as plt
import os

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö ---
user_data = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = [["üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏", "‚öñÔ∏è –í–µ—Å"],
             ["üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", "üóë –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"]]

days_keyboard = [["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞"],
                 ["–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"],
                 ["üîô –ù–∞–∑–∞–¥"]]

reset_keyboard = [["‚ùå –°–±—Ä–æ—Å–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"],
                  ["‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å"],
                  ["üî• –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë"],
                  ["üìÖ –°–±—Ä–æ—Å –ø–æ –¥–Ω—è–º"],
                  ["üîô –ù–∞–∑–∞–¥"]]

day_menu = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"],
            ["üìã –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"],
            ["üîô –ù–∞–∑–∞–¥"]]

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = {"weight": [], "exercises": {}}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç üèãÔ∏è‚Äç‚ôÇÔ∏è", 
                                    reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if text == "üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", 
                                        reply_markup=ReplyKeyboardMarkup(days_keyboard, resize_keyboard=True))

    elif text == "‚öñÔ∏è –í–µ—Å":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 72.5)")

    elif text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å":
        await progress_graph(update, context)

    elif text == "üóë –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö":
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–±—Ä–æ—Å–∏—Ç—å?", 
                                        reply_markup=ReplyKeyboardMarkup(reset_keyboard, resize_keyboard=True))

    # –°–±—Ä–æ—Å
    elif text == "‚ùå –°–±—Ä–æ—Å–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        user_data[user_id]["exercises"] = {}
        await update.message.reply_text("‚úÖ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")

    elif text == "‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å":
        user_data[user_id]["weight"] = []
        await update.message.reply_text("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ —É–¥–∞–ª–µ–Ω—ã.")

    elif text == "üî• –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë":
        user_data[user_id] = {"weight": [], "exercises": {}}
        await update.message.reply_text("üî• –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω—ã.")

    elif text == "üìÖ –°–±—Ä–æ—Å –ø–æ –¥–Ω—è–º":
        context.user_data["reset_day_mode"] = True
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –¥–ª—è —Å–±—Ä–æ—Å–∞:", 
                                        reply_markup=ReplyKeyboardMarkup(days_keyboard, resize_keyboard=True))

    elif text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]:
        if "reset_day_mode" in context.user_data and context.user_data["reset_day_mode"]:
            if text in user_data[user_id]["exercises"]:
                del user_data[user_id]["exercises"][text]
                await update.message.reply_text(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {text} —É–¥–∞–ª–µ–Ω—ã.", 
                                                reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True))
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –í {text} –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", 
                                                reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True))
            context.user_data["reset_day_mode"] = False
        else:
            context.user_data["current_day"] = text
            await update.message.reply_text(f"üìÖ {text} ‚Äî –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                            reply_markup=ReplyKeyboardMarkup(day_menu, resize_keyboard=True))

    # –ú–µ–Ω—é –¥–Ω—è
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        if "current_day" in context.user_data:
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
            context.user_data["add_exercise_mode"] = True

    elif "add_exercise_mode" in context.user_data and context.user_data["add_exercise_mode"]:
        context.user_data["exercise_name"] = text
        context.user_data["add_exercise_mode"] = False
        context.user_data["add_sets_mode"] = True

        day = context.user_data["current_day"]
        exercise = context.user_data["exercise_name"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫—Ä–∞–π–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if day in user_data[user_id]["exercises"] and exercise in user_data[user_id]["exercises"][day]:
            prev = user_data[user_id]["exercises"][day][exercise]
            await update.message.reply_text(
                f"üìå –ö—Ä–∞–π–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {prev['sets']}x{prev['reps']} {prev['weight']} –∫–≥\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä: 3x10x60)"
            )
        else:
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä: 3x10x60)")

    elif "add_sets_mode" in context.user_data and context.user_data["add_sets_mode"]:
        try:
            sets, reps, weight = text.split("x")
            sets, reps, weight = int(sets), int(reps), float(weight)
            day = context.user_data["current_day"]
            exercise = context.user_data["exercise_name"]

            if day not in user_data[user_id]["exercises"]:
                user_data[user_id]["exercises"][day] = {}

            user_data[user_id]["exercises"][day][exercise] = {
                "sets": sets, "reps": reps, "weight": weight
            }

            await update.message.reply_text(
                f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {exercise} ‚Äî {sets}x{reps} {weight} –∫–≥",
                reply_markup=ReplyKeyboardMarkup(day_menu, resize_keyboard=True)
            )
        except:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –í–≤–µ–¥–∏ —Ç–∞–∫: 3x10x60")
        finally:
            context.user_data["add_sets_mode"] = False

    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        day = context.user_data.get("current_day")
        if day and day in user_data[user_id]["exercises"]:
            msg = f"üìÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ {day}:\n\n"
            for ex, data in user_data[user_id]["exercises"][day].items():
                msg += f"üèãÔ∏è {ex}: {data['sets']}x{data['reps']} {data['weight']} –∫–≥\n"
            await update.message.reply_text(msg)
        else:
            await update.message.reply_text("‚ö†Ô∏è –í —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â—ë –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")

    elif text == "üîô –ù–∞–∑–∞–¥":
        if "current_day" in context.user_data:
            del context.user_data["current_day"]
        await update.message.reply_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                        reply_markup=ReplyKeyboardMarkup(main_menu, resize_keyboard=True))

    # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –≤–µ—Å –≤—Ä—É—á–Ω—É—é
    else:
        try:
            weight = float(text.replace(",", "."))
            user_data[user_id]["weight"].append(weight)
            await update.message.reply_text(f"‚úÖ –í–µ—Å {weight} –∫–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.")

# --- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø–æ –≤–µ—Å—É) ---
async def progress_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_data[user_id]["weight"]:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚ö†Ô∏è")
        return

    weights = [float(w) for w in user_data[user_id]["weight"]]
    plt.plot(weights, marker="o")
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞")
    plt.xlabel("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    plt.ylabel("–í–µ—Å (–∫–≥)")

    file_path = "progress.png"
    plt.savefig(file_path)
    plt.close()

    await update.message.reply_photo(photo=open(file_path, "rb"))
    os.remove(file_path)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = Application.builder().token("8443570362:AAE9cCVoxtlKsdmlc0Gbqe1ABKwnQmIO79M").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
